---
title: "Exploratory Visualization and Quality Control"
author: "Gustav Joas"
format: html
editor: visual
date: '`r format(Sys.Date(), "%Y-%m-%d")`'
---

```{r, global.options, include=FALSE}
# Global knitr settings 
# Set up figures and chunks messages

knitr::opts_knit$set(
  echo = TRUE,
  root.dir = getwd(),
  fig.width = 6, fig.height = 5,
  fig.align = "center",
  out.width = 768,
  fig.pos = "H",
  warning = FALSE,
  message = FALSE
)
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  fig.width = 6, fig.height = 5,
  fig.align = "center",
  out.width = 768,
  fig.pos = "H"
)


result.dir <- paste0("output/3_exploratory_qc/", Sys.Date(), "/")
figures.dir <- paste0(result.dir, "figures/")

# Create result.dir with date if not existent
ifelse(isFALSE(dir.exists(result.dir)),
  dir.create(result.dir, recursive = TRUE),
  "Result directory for today exists already!"
)

# Create figures.dir with date if not existent
ifelse(isFALSE(dir.exists(figures.dir)),
  dir.create(figures.dir, recursive = TRUE),
  "Figures directory for today exists already!"
)

options(stringsAsFactors = FALSE)
```

## Load packages

```{r}
#| label: load-packages
#| include: false

suppressPackageStartupMessages({
    library(SummarizedExperiment)
    library(DESeq2)
    library(vsn)
    library(ggplot2)
    library(ggforce)
    library(ComplexHeatmap)
    library(RColorBrewer)
    library(iSEE)
    library(plotly)
    library(Glimma)
    library(stringr)
    library(dplyr)
    library(tidyr)
})

getwd()
```

## Load data

```{r}
input_se_path <- "output/2_summarized_experiment/se.rds"
se <- readRDS(input_se_path)
```

# Basic Quality Control

## Inspect raw data

```{r, fig.keep='all'}
#rafalib::mypar(1,3, mar=c(5, 4, 2, 1))
# Visualize distribution of raw counts with boxplot and density plot
boxplot(log2(as.matrix(assay(se)) + 1),
  ylab = expression("Log"[2] ~ "Read counts"),
  las = 2,
  main = "Raw data"
)
hist(log2(as.matrix(assay(se)) + 1),
  ylab = "",
  las = 2,
  main = "Raw data"
)
hist(rowSums(assay(se)>3),
     main = 'Raw Data',
     xlab = 'Number of samples with counts > 3',
     ylab = 'Number of genes',)
#par(mfrow=c(1,1))
```

Plot number of genes with counts greater than 3 detected in each sample. All samples are more or less close to the average. None of the samples look bad enough to be removed.

Basic plot

```{r, results='hide'}
barplot(colSums(assay(se) > 3),
  ylab = "Number of detected genes",
  las = 2
) +
  abline(h = median(colSums(assay(se) > 3)))

```

### Supplemental Figure 2A

Prepare data for plot

```{r}
# Calculate number of detected genes per sample
detected_genes_df <- data.frame(
  sample = colnames(se),
  group = colData(se)$group,
  detected_genes = colSums(assay(se) > 3)
  
)

detected_genes_df$group <- as.factor(detected_genes_df$group)

detected_genes_df <- detected_genes_df %>%
  mutate(
    # Remove group prefix (e.g., "1_")
    sample_no_group = str_remove(sample, "^\\d+_")) %>%
  arrange(group, sample_no_group) %>%
  mutate(
        # Create cleaned label
    sample_no_group_clean = str_replace_all(sample_no_group, "_", " "),
    sample_no_group_clean = factor(sample_no_group_clean, levels = rev(sample_no_group_clean)))
```

```{r}
# Split sample_no_group into animal_ID and timepoint
detected_genes_df <- detected_genes_df %>%
  separate(sample_no_group, into = c("animal_ID", "timepoint"), sep = "_", extra = "merge")

# relabel timepoints
detected_genes_df <- detected_genes_df %>%
  mutate(timepoint_short = case_when(
    timepoint == "0_primary" ~ "Baseline",
    timepoint == "24_primary" ~ "24h Dose 1",
    timepoint == "24_boost" ~ "24 Dose 5",
    TRUE ~ timepoint
  ))

# Apply ordering
detected_genes_df <- detected_genes_df %>%
  mutate(
    plot_label = paste(animal_ID, timepoint_short),
  )

# Define the desired timepoint order
timepoint_order <- c("Baseline", "24h Dose 1", "24h Dose 5")

# Create plot_label_levels in desired order
plot_label_levels <- detected_genes_df %>%
  mutate(
    timepoint_short = factor(timepoint_short, levels = timepoint_order)
  ) %>%
  arrange(group, animal_ID, timepoint_short) %>%
  pull(plot_label) %>%
  unique()

detected_genes_df <- detected_genes_df %>%
  mutate(
    plot_label = factor(plot_label, levels = rev(plot_label_levels))
  )
```

Plot supplemental figure 2A

```{r}
# Define group color palette (custom)
group_colors_named <- c("1" = "#7392C0", "2" = "#997FAD", "3" = "#B6D47C")

plot_detected_genes <- ggplot(detected_genes_df, aes(x = plot_label, y = detected_genes, fill = group)) +
  geom_col(color = NA) +
  geom_hline(yintercept = median(detected_genes_df$detected_genes),
             linetype = "dashed", color = "red") +
  scale_fill_manual(values = group_colors_named) +
  scale_y_continuous(breaks = seq(0, 13000, by = 2500), expand = c(0, 0)) + 
  labs(
    x = "Sample",
    y = "Number of genes with >3 counts",
    title = "Detected genes per sample"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 12),
    legend.title = element_blank()
  ) +
  coord_flip()

plot_detected_genes
```

```{r}
# Save as PDF
ggsave(
  filename = file.path(figures.dir, "detected_genes_per_sample.pdf"),
  plot = plot_detected_genes,
  width = 7, height = 6, units = "in", device = cairo_pdf
)
```

# Filtering

## Remove unexpressed genes

Remove genes/rows that do not have \> 5 count in at least 3 samples

```{r}
cat("Number of genes before filtering: ", nrow(se), "\n")
se <- se[rowSums(assay(se) > 5) >= 3, ]
cat("Number of genes left after filtering: ", nrow(se), "\n")
```

```{r}
boxplot(log2(as.matrix(assay(se)) + 1),
  ylab = expression("Log"[2] ~ "Read counts"),
  las = 2,
  main = "Filtered data"
)
hist(log2(as.matrix(assay(se)) + 1),
  ylab = "",
  las = 2,
  main = "Filtered data"
)
hist(rowSums(assay(se)>3),
     main = 'Filtered Data',
     xlab = 'Number of samples with counts > 3',
     ylab = 'Number of genes',)
```

# Normalization

## Library size difference

### Suplemental Figure 2B

```{r}
detected_genes_df <- detected_genes_df %>%
  mutate(lib_size = colSums(assay(se)))

plot_library_size <-ggplot(detected_genes_df, aes(x = plot_label, y = lib_size / 1e6, fill = group)) +
  geom_col(color = NA) +
  scale_fill_manual(values = group_colors_named) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(
    x = "Sample",
    y = "Library size (millions of reads)",
    title = "Library size per sample"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.y = element_text(size = 10),
    axis.text.x = element_text(size = 12),
    legend.title = element_blank()
  ) +
  coord_flip()

plot_library_size
```

```{r}
ggsave(
  filename = file.path(figures.dir, "library_size_per_sample.pdf"),
  plot = plot_library_size,
  width = 7, height = 6, units = "in", device = cairo_pdf
)
```

# More Visualization

## **Create DESeq object**

```{r}
# Convert 'group' and 'timepoint' to factors
se$timepoint <- factor(se$timepoint, levels = c("0_primary", "24_primary", "24_boost"))

se$group <- factor(se$group, levels = c("1", "2", "3"))

# create DESeq object
dds <- DESeqDataSet(se, design = ~ group + timepoint)
```

```{r}
dds <- estimateSizeFactors(dds)

# Plot the size factors against library size and look for any patterns by group:

size_factor_plot <- ggplot(data.frame(libSize = colSums(assay(dds)),
                  sizeFactor = sizeFactors(dds),
                  group = dds$group),
       aes(x = libSize, y = sizeFactor, col = group)) + 
    geom_point(size = 5) + theme_bw() + 
    labs(x = "Library size", y = "Size factor")

ggplotly(size_factor_plot)

```

# Transform data

```{r}
meanSdPlot(assay(dds), ranks = FALSE)
saved_plot <- recordPlot()
```

```{r}
vsd <- DESeq2::vst(dds, blind = TRUE)
meanSdPlot(assay(vsd), ranks = FALSE)
saved_plot <- recordPlot()
```

```{r}
png(filename = paste0(figures.dir, "mean_sd_plot_vsd.png"), width = 768, height = 640)
replayPlot(saved_plot)
dev.off()
```

# Heatmaps and clustering

```{r}
# Define color palettes for your factors
sample_colors <- brewer.pal(n = 3, name = "Paired") 
group_colors <- brewer.pal(n = 3, name = "Set3")

# Create named lists to map colors to the levels of your factors
sample_colors_named <- setNames(sample_colors, levels(se$timepoint))
group_colors_named <- setNames(group_colors, levels(se$group))
```

```{r}
set.seed(123)

dst <- dist(t(assay(vsd)))
colors <- colorRampPalette(brewer.pal(9, "Blues"))(255)

heatmap <- ComplexHeatmap::Heatmap(
    as.matrix(dst), 
    col = colors,
    name = "Euclidean\ndistance",
    cluster_rows = hclust(dst),
    cluster_columns = hclust(dst),
    bottom_annotation = columnAnnotation(
        Group = vsd$group,
        Time = vsd$timepoint,
        col = list(timepoint = sample_colors_named, group = group_colors_named)))

heatmap
```

```{r}
png(filename = paste0(figures.dir, "heatmap.png"), width = 6*96, height = 5*96, res = 96)
draw(heatmap)
dev.off()
```

# PCA

### Supplemental Figure 2C

```{r}
pcaData <- DESeq2::plotPCA(vsd, intgroup = c("timepoint", "group"),
                           returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
# Refined PCA plot with improved aesthetics and custom colors
pca_plot_refined <- ggplot(pcaData, aes(x = PC1, y = PC2, fill = group.1, shape = timepoint)) +
  geom_point(size = 5, stroke = 1, color = "black") + 
  xlab(paste0("PC1: ", percentVar[1], "%")) +  
  ylab(paste0("PC2: ", percentVar[2], "%")) + 
  theme_minimal(base_size = 16) + 
  theme(
    axis.title = element_text(face = "bold"),  
    axis.text = element_text(size = 12),       
    legend.title = element_blank(),            
    legend.text = element_text(size = 12),     
    panel.grid.major = element_blank(),        
    panel.grid.minor = element_blank(),        
      axis.text.x = element_blank(),           
  axis.text.y = element_blank()   
  ) +
  scale_fill_manual(
    values = c("#7392C0", "#997FAD", "#B6D47C") 
  ) +
  scale_shape_manual(values = c(22, 21, 24))   

pca_plot_refined
```

```{r}
# Define file path
pdf_path <- file.path(figures.dir, "pca_plot_refined.pdf")

# Save plot
ggsave(filename = pdf_path,
       plot = pca_plot_refined,
       width = 6, height = 5, units = "in", device = cairo_pdf)
```

```{r}
writeLines(capture.output(sessionInfo()), file.path(result.dir, "session_info.txt"))
```
