---
title: "DESeq analysis"
format: html
editor: visual
date: '`r format(Sys.Date(), "%Y-%m-%d")`'
---

```{r, global.options, include=FALSE}
# Global knitr settings 
# Set up figures and chunks messages

knitr::opts_knit$set(
  echo = TRUE,
  root.dir = getwd(),
  fig.width = 6, fig.height = 5,
  fig.align = "center",
  out.width = 768,
  fig.pos = "H",
  warning = FALSE,
  message = FALSE
)
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  fig.width = 6, fig.height = 5,
  fig.align = "center",
  out.width = 768,
  fig.pos = "H"
)


result.dir <- paste0("output/4_deseq_analysis/", Sys.Date(), "/")
figures.dir <- paste0(result.dir, "figures/")

# Create result.dir with date if not existent
ifelse(isFALSE(dir.exists(result.dir)),
  dir.create(result.dir, recursive = TRUE),
  "Result directory for today exists already!"
)

# Create figures.dir with date if not existent
ifelse(isFALSE(dir.exists(figures.dir)),
  dir.create(figures.dir, recursive = TRUE),
  "Figures directory for today exists already!"
)

options(stringsAsFactors = FALSE)
```

## Load packages

```{r}
#| label: load-packages
#| include: false

suppressPackageStartupMessages({
    library(SummarizedExperiment)
    library(tidySummarizedExperiment)
    library(DESeq2)
    library(vsn)
    library(ggplot2)
    library(ComplexHeatmap)
    library(RColorBrewer)
    library(hexbin)
    library(iSEE)
    library(plotly)
    library(ggplot2)
    library(ggrepel)
    library(dplyr) 
    library(genefilter)
    library(kableExtra)
    library(ggprism)
})
```

## Source external script with functions

```{r}
#| label: load-packages
#| include: false

source("scripts/helper_functions.R")
```

## Load data

```{r}
#| label: load-data
se <- readRDS("output/2_summarized_experiment/se.rds")
```

## Set global variables

Design formula for DESEq2 analysis

```{r}
# Define the main and additional effects to be used in DESeq design formula
MAIN_EFFECT <- "timepoint"    
ADDITIONAL_EFFECTS <- NULL  # see column names in colData(se), set to c("group", "animal_ID") to include group and animal_ID in the model
```

Choose which parameters to test

```{r}
REFERENCE_TIME = "0_primary"    # Reference time level for releveling
# REFERENCE_CONSTRUCT = "unmodified"  # Reference construct for filtering
TEST <- se$group == "3" # Define the variable that controls the subset of data to test
TEST_TEXT <- "group_3"  # Define the text to use in filenames
```

Prepare data for DESeq. Convert to factors.

```{r}
# turn relevant columns into factors
se$timepoint <- factor(se$timepoint, levels = c("0_primary", "24_primary", "24_boost"))
se$group <- factor(se$group, levels = c("1", "2", "3"))
se$animal_ID <- factor(se$animal_ID)

# add column for modified and unmodified and turn into factor
colData(se)$construct <- ifelse(colData(se)$group %in% c(2, 3), "modified", "unmodified")
se$construct <- factor(se$construct, levels = c("unmodified", "modified"))
```

## Filtering

Remove unexpressed genes. Remove genes (ie rows) that do not have \> 5 count in at least 3 samples

```{r}
cat("Number of genes before filtering: ", nrow(se), "\n")
se <- se[rowSums(assay(se) > 5) >= 3, ]
cat("Number of genes left after filtering: ", nrow(se), "\n")
```

# Run DESeq

```{r}
# Filter the se object to only include the things being testet
se <- se[, TEST]
View(as.data.frame(colData(se)))
```

```{r}
# Create the formula for DESeq2
DESIGN_FORMULA <- create_deseq_formula(main = MAIN_EFFECT, additional = ADDITIONAL_EFFECTS)
print(DESIGN_FORMULA) 

# Save the design formula as a string, for use in filenames
DESIGN_FORMULA_TEXT <- paste(as.character(DESIGN_FORMULA), collapse = " ")
```

```{r}
# Create the DESeqDataSet object
dds <- DESeq2::DESeqDataSet(se, design = DESIGN_FORMULA)

# relevel timepoint
dds$timepoint <- relevel(dds$timepoint, ref = REFERENCE_TIME)

dds <- DESeq2::DESeq(dds)

plotDispEsts(dds)
```

## Heatmap

Variance stabilizing transformation

```{r}
# Transform counts
vsd <- vst(dds, blind = FALSE)
```

Identify 20 genes with highest variance across all time points and groups. Scale counts for visualization. Add annotation and plot as heatmap.

```{r}
# Select the top most variable genes across all samples
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)

heatmapData <- assay(vsd)[topVarGenes, ]

# Scale counts for visualization
heatmapData <- t(scale(t(heatmapData)))

# Add annotation
heatmapColAnnot <- data.frame(colData(vsd)[, c("timepoint", "group", "construct")])
heatmapColAnnot <- HeatmapAnnotation(df = heatmapColAnnot)

# Resize the heatmap annotation with custom height
heatmapColAnnot <- re_size(heatmapColAnnot,
                           height = unit(10, "cm"))  # Set overall height of the heatmap annotation

# Plot as heatmap
DEG_heatmap <- ComplexHeatmap::Heatmap(heatmapData,
                        top_annotation = heatmapColAnnot,
                        cluster_rows = TRUE, cluster_columns = TRUE,
                        name = " ")
DEG_heatmap
```

```{r}
png(filename = paste0(figures.dir, "heatmap.png"), width = 6*1000, height = 5*1000, res = 300)
draw(DEG_heatmap)
dev.off()
```

# Results

Set up the analysis for DESeq2 results

```{r}
# Initialize an empty list to store results
results_list <- list()
```

## Main Effect

Run the results function on each comparison and put output in the results list

```{r}
result_names <- resultsNames(dds)

for (result_name in result_names[-1]) {
    # Construct a custom name for storing in the list
    result_name <- paste0(result_name)
    
    # Print the analysis and result name
    print(paste("Running DESeq2 results for:", result_name))
   
    # Run the DESeq2 results function for the current comparison
    # lfcThreshold and altHypothesis="greaterAbs" to adjusts the null hypothesis to exclude genes with small fold changes
    res <- results(dds, name = result_name, lfcThreshold = 1, altHypothesis = "greaterAbs")
    
  # Apply lfcShrink to stabilize the log fold changes
    res_shrunk <- lfcShrink(dds, coef = result_name, res = res,  type = "apeglm")
    DESeq2::summary(res_shrunk)
    
    # Store the shrunken result in the list with the custom name
    results_list[[result_name]] <- res_shrunk
}
```

### Save results

```{r}
#| eval=FALSE
#| include: false

# Convert the gene annotations to a data frame
gene_annotations <- as.data.frame(rowData(se))

for (result_name in names(results_list)) {
  
  # Convert the DESeq2 result to a data frame and make the rownames a column called 'gene_id'
  single_result <- as.data.frame(results_list[[result_name]])
  #single_result <- tibble::rownames_to_column(single_result, var = "gene_id")
  
  # Merge the single_result with gene_annotations using 'gene_id' to ensure alignment
  combined_data <- merge(gene_annotations, single_result, by = "gene_id", all.y = TRUE)
  
  # Define the output filename
  output_filename <- paste0(result.dir, result_name, "_", TEST_TEXT, ".csv")
  
  # Write the combined data to a CSV file
  write.csv(combined_data, file = output_filename, row.names = FALSE)
  
  # Print a message to confirm the file was saved
  cat("Saved:", output_filename, "\n")
}
```

# Visualise DEGs

## P-value histogram plots

```{r}
# Prepare a data frame to store all p-values and their corresponding comparison names
pval_data <- data.frame()

for (result_name in names(results_list)) {
  res <- results_list[[result_name]]
  
  # Add the p-values and the comparison name to the data frame
  pval_data <- pval_data %>% 
    bind_rows(data.frame(pvalue = res$pvalue, comparison = result_name))
}

# Create the faceted histogram
pval_plot <- ggplot(pval_data, aes(x = pvalue)) +
  geom_histogram(bins = 50, fill = "lightblue", color = "black") +
  facet_wrap(~ comparison, scales = "free_y") +  # Facet by comparison
  theme_minimal() +
  labs(title = "P-value Distributions Across Comparisons",
       subtitle = paste(TEST_TEXT),
       x = "P-values",
       y = "Count")

# Save the plot
ggsave(filename = paste0(figures.dir, "pvalue_distributions_facet.png"), 
       plot = pval_plot, 
       width = 12, height = 8, dpi = 300, bg = "white")  

pval_plot
```

## Volcano plots

Extract gene names to DESeq2 result list to integrate into volcano plots.

```{r}
# Step 1: Extract the gene annotation information from rowData
gene_annotations <- as.data.frame(rowData(se))

# Step 2: Iterate through each result in the original results_list
for (result_name in names(results_list)) {
  
  # Step 3: Convert each DESeq2 result to a data frame
  res <- as.data.frame(results_list[[result_name]])
  
  # Step 4: Merge the results with gene names from gene_annotations based on rownames (Ensembl IDs)
  res <- merge(gene_annotations[, c("gene_id", "gene_name")], res, by.x = "gene_id", by.y = "row.names", all.y = TRUE)
  
  # Step 5: Assign the merged data back to the original results_list
  results_list[[result_name]] <- res
}

# Check the output of the first modified result
head(results_list[[1]])
```

Custom lists of genes to label in the volcano plots.

```{r}
# Define a list of genes to label to include in volcano plots
  orebro_list <- c("RSAD2", "IFIT1", "CXCL10", "CMPK2", "GBP1P1", 
                  "IFI44L", "BATF2", "SIGLEC1", "IFI44", "NDUFS4", 
                  "MX1", "CXCL9", "FCGR1A", "FCGR1B", "CCL4")
  
# T helper cytokines list
t_helper_list <- c(
  "CSF2", "IFNG", "IL1B", "IL2", "IL4", "IL5", 
  "IL6", "CXCL8", "IL10", "IL12A", "IL12B", "IL13", 
  "IL17A", "IL18", "IL23A", "TNF"
)

# Cytokines list
cytokines_list <- c(
  "CD40LG", "CSF3", "IFNA6", "IFNA8", "IFNA10", "IFNA13", "IFNA14", "IFNA16", "IFNA21", "IL1RN", "IL7", "IL15"
)

# Chemokines list
chemokines_list <- c(
  "CXCL13", "CCL11", "CXCL10", 
  "CXCL11", "CCL2", "CXCL9", 
  "CCL3", "CCL4L1", "CCL4", "CXCL12"
)

# Combine the three lists into one
combined_list <- c(t_helper_list, cytokines_list, chemokines_list)
```

```{r}
generate_volcano_plot(results_list)
```
